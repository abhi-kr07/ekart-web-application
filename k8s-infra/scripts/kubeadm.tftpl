#!/bin/bash

set -e 
# Load necessary kernel modules for containerd
cat << EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# Configure kernel networking requirements for Kubernetes
cat << EOF | sudo tee /etc/sysctl.d/99-kubernetes.conf
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

sudo sysctl --system

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" >/etc/apt/sources.list.d/docker.list
apt-get update
apt-get install -y containerd.io

# Configure containerd to use the systemd cgroup driver
# https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd-systemd
mkdir -p /etc/containerd
containerd config default >/etc/containerd/config.toml
sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
systemctl restart containerd
systemctl enable containerd


# Disable swap to meet Kubernetes requirements
sudo swapoff -a
sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl gpg


# Add Kubernetes apt repository and GPG key
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

# Update package information and install specific Kubernetes components
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl

# Prevent automatic updates for Kubernetes components
sudo apt-mark hold kubelet kubeadm kubectl

########### For Master ################
%{ if node == "master" ~}

sudo hostnamectl set-hostname k8s-master

# Generate token dynamically
# TOKEN=$(kubeadm token create --print-join-command | awk '{print $3}')
TOKEN="${token}"

kubeadm init \
    --token "$TOKEN" \
    --token-ttl 15m \
    --apiserver-cert-extra-sans "${master_public_ip}" \
    %{~ if cidr != null ~}
    --pod-network-cidr "${cidr}" \
    %{~ endif ~}
    --node-name k8s-master 

mkdir -p /home/ubuntu/.kube
sudo cp /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
# sudo cp /etc/kubernetes/admin.conf /home/ubuntu
sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube

# sudo chown ubuntu:ubuntu /home/ubuntu/admin.conf
# sudo chown ubuntu:ubuntu /home/ubuntu/.kube/config

# commenting after master is not ready as now i am waiting down below so i think its not required
# sleep 5 

# kubectl --kubeconfig /home/ubuntu/admin.conf config set-cluster kubernetes --server "https://${master_public_ip}:6443"


# Untaint master for scheduling pods
kubectl --kubeconfig /home/ubuntu/.kube/config taint nodes --all node-role.kubernetes.io/master- || true

# Deploy Weave CNI with timeout
timeout=300
interval=5
elapsed=0
kubectl --kubeconfig /home/ubuntu/.kube/config apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

# Wait for weave pods Running (with timeout)
while [ $elapsed -lt $timeout ]; do
  running=$(kubectl --kubeconfig /home/ubuntu/.kube/config get pods -n kube-system -l name=weave-net -o jsonpath='{.items[*].status.phase}' | grep -c "Running" || true)
  if [ "$running" -ge 2 ]; then
    break
  fi
  sleep $interval
  elapsed=$((elapsed + interval))
done

# Wait for node Ready (with timeout)
elapsed=0
while [ $elapsed -lt $timeout ]; do
  ready=$(kubectl --kubeconfig /home/ubuntu/.kube/config get nodes -o jsonpath='{.items[0].status.conditions[?(@.type=="Ready")].status}')
  if [ "$ready" == "True" ]; then
    break
  fi
  sleep $interval
  elapsed=$((elapsed + interval))
done

# Install weave network plugin for pod networking
#kubectl --kubeconfig /home/ubuntu/admin.conf apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml 
# Set hostname

# Save token to file so worker nodes can read it
# echo $TOKEN > /home/ubuntu/kubejoin.token

%{~ endif ~}


############ For Worker ################
%{~ if node == "worker" ~}

echo "Waiting for master API ${master_private_ip}:6443..."
until nc -zv ${master_private_ip} 6443 >/dev/null 2>&1; do
  sleep 5
done

# Get token from master
# TOKEN=$(ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/id_rsa ubuntu@${master_private_ip} "cat /home/ubuntu/kubejoin.token")
TOKEN="${token}"


kubeadm join "${master_private_ip}:6443" \
  --token "$TOKEN" \
  --discovery-token-unsafe-skip-ca-verification \
  --node-name k8s-worker-${worker_index} \
  2>&1 | tee /home/ubuntu/join.log

# Set hostname
sudo hostnamectl set-hostname k8s-worker-${worker_index}
%{~ endif }

# Indicate completion
touch /home/ubuntu/done